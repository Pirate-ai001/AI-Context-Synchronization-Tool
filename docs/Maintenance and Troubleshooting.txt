# Maintenance and Troubleshooting Guide

## Overview

This guide provides detailed instructions for maintaining and troubleshooting the **Context Synchronization Tool**, which integrates Git Diffs and file monitoring to streamline context generation for AI models.

The tool is designed to be adaptable, globally maintainable, and user-friendly, with a focus on minimizing manual intervention and ensuring seamless operation with AI chatbots like Claude and ChatGPT.

## System Requirements

- Node.js v16 or higher
- pnpm package manager
- Git installed and configured
- Sufficient file system permissions
- Available disk space for logs and caching
- Internet connection (for package installation)

## Key Components

1. **Git Diff Relational Context**:
   - Tracks changes in version-controlled files
   - Dynamically includes related files based on config.json5
   - Uses debounce protection for efficient processing
   - Monitors git status (added, modified, deleted files)

2. **File Monitoring**:
   - Real-time file change detection with chokidar
   - Smart pattern matching with glob support
   - Configurable ignore patterns
   - Idle state monitoring

3. **Configuration System**:
   - JSON5-based configuration for enhanced readability
   - Hot-reload support for configuration changes
   - Framework-independent integration
   - Debug mode for detailed logging
   - Supports custom git repository paths

4. **Performance Optimization**:
   - Efficient file watching with debouncing
   - Optimized git diff execution
   - Smart caching and pattern matching
   - Path normalization for cross-platform support

## Maintenance Tasks

### 1. Configuration Management

#### Initial Setup
1. Verify configuration file exists:
   ```bash
   ls Configuration/config.json5
   ```
2. Create from template if missing:
   ```bash
   cp Configuration/config.template.json5 Configuration/config.json5
   ```

#### Updating the Configuration
1. Navigate to `Configuration/config.json5`
2. Modify settings as needed:
   ```json5
   {
     // Basic settings
     "watchAllFiles": false,
     "debugMode": true,
     "debounceTime": 300,
     
     // Git configuration
     "gitConfig": {
       "enabled": true,
       "repositoryPath": "path/to/your/repo",
       "branch": "main",
       "showGitStatus": true
     },
     
     // Watch directories
     "watchDirectories": [
       "./src/**/*"
     ]
   }
   ```
3. Save changes - the tool will automatically reload

#### Best Practices
- Keep backup of working configurations
- Document custom changes
- Use version control for configurations
- Regularly review and clean up patterns
- Test configuration changes in dummy project first

### 2. System Health Monitoring

#### Regular Checks
1. Verify active monitoring:
   ```bash
   pnpm run monitor
   ```
2. Check system resources:
   - Monitor memory usage
   - Track CPU utilization
   - Review disk space for logs
   - Check for hung processes

#### Log Management
- Monitor log files for errors
- Implement log rotation if needed
- Clean up old logs periodically
- Archive important logs

### 3. Performance Optimization

#### Watch Pattern Optimization
```json5
{
  "ignoredPatterns": [
    "**/node_modules/**",
    "**/.git/**",
    "**/dist/**",
    "**/*.{log,tmp}",
    "**/build/**"
  ],
  "watchDirectories": [
    "./src/**/*.{js,tsx,jsx}",
    "./config/*.json"
  ]
}
```

#### Resource Usage
- Adjust debounce time based on system performance
- Optimize file watch patterns
- Use specific glob patterns
- Monitor memory consumption

## Troubleshooting

### Common Issues and Solutions

#### 1. JSON5 Parsing Errors

**Symptom**: Configuration file parsing errors
```
Failed to parse configuration file: invalid character '#' at 1:1
```

**Solutions**:
1. Check JSON5 syntax:
   - Remove markdown-style comments (#)
   - Use JSON5 comments (//)
   - Verify proper object structure
2. Example of correct format:
   ```json5
   // Configuration file
   {
     // Watch settings
     "watchAllFiles": true,
     /* Multiple line
        comments are okay too */
     "debounceTime": 300
   }
   ```

#### 2. Git Integration Issues

**Symptom**: Git diff errors or missing changes

**Solutions**:
1. Verify git setup:
   ```bash
   git --version
   git status
   ```
2. Check repository path in config:
   ```json5
   {
     "gitConfig": {
       "repositoryPath": "correct/path/to/repo"
     }
   }
   ```
3. Verify branch configuration:
   ```bash
   git branch --list
   ```

#### 3. File Monitoring Issues

**Symptom**: Missing file changes or excessive CPU usage

**Solutions**:
1. Check configuration:
   - Verify paths
   - Review ignore patterns
   - Update watch directories
2. Adjust debounce settings:
   ```json5
   {
     "debounceTime": 500  // Increase for stability
   }
   ```

### Debug Mode

Enable detailed logging:
```json5
{
  "debugMode": true,
  "logLevel": "verbose"
}
```

Console output colors:
- ðŸŸ¢ Green: Normal operations
- ðŸ”µ Blue: Debug information
- ðŸŸ¡ Yellow: Warnings
- ðŸ”´ Red: Errors

### Recovery Procedures

1. **Configuration Reset**
   ```bash
   rm Configuration/config.json5
   # Restart tool - creates new config
   pnpm run monitor
   ```

2. **Clean Installation**
   ```bash
   rm -rf node_modules
   pnpm install
   ```

3. **Emergency Shutdown**
   - Use Ctrl+C to stop the process
   - Check for hanging processes:
     ```bash
     # Windows
     taskkill /F /IM node.exe
     # Linux
     pkill -f file_monitoring
     ```
   - Clear temporary files

## Advanced Topics

### Cross-Platform Compatibility
- Use forward slashes (/) in paths
- Test on multiple operating systems
- Handle path separators correctly
- Use relative paths when possible

### Large Project Optimization
- Use specific watch patterns
- Implement chunking for large files
- Optimize relational mapping
- Consider using .gitignore for better performance

### Security Considerations
- Avoid watching sensitive directories
- Use appropriate file permissions
- Keep dependencies updated
- Validate file paths

## Support

For additional support:
1. Check GitHub Issues
2. Review documentation in /docs
3. Contact maintainers for serious issues

When reporting issues, include:
- Full error messages
- Configuration file (sanitized)
- Steps to reproduce
- System information:
  - Node.js version (`node --version`)
  - Operating system
  - Package versions (`pnpm list`)
  - Git version (`git --version`)